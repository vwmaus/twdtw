% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/twdtw.R
\name{twdtw}
\alias{twdtw}
\title{Calculate TWDTW Distance between Time Series}
\usage{
twdtw(
  x,
  y,
  tw = c(100, 1),
  step_matrix = symmetric1,
  version = "f90",
  index_column = "date",
  lower_band = TRUE,
  all_matches = FALSE,
  ...
)
}
\arguments{
\item{x}{A tibble, data.frame, or data.table representing the first time series.}

\item{y}{A tibble, data.frame, or data.table representing the second time series.}

\item{tw}{Numeric vector of length 2 representing the time-weight parameters alpha and beta.
Defaults to c(100, 1) (set weight to zero).}

\item{step_matrix}{A matrix specifying the step pattern for the TWDTW algorithm.
Defaults to symmetric1.}

\item{version}{A string identifying the version of twdtw implementation.
Options are 'f90' for Fortran 90, 'f90goto' for Fortran 90 with goto statements,
or 'cpp' for C++ version. Defaults to 'f90'. See details.}

\item{index_column}{The column name of the time index. Defaults to "date".}

\item{lower_band}{Logical indicating whether to constrain the TWDTW calculation
to the lower band given by the time-weight parameter beta. Defaults to TRUE.}

\item{all_matches}{Logical indicating whether to find all matches within the
TWDTW matrix. Defaults to FALSE.}

\item{...}{other par}
}
\value{
A numeric value representing the TWDTW distance between the two time series.
}
\description{
This function calculates the Time-Weighted Dynamic Time Warping (TWDTW) distance
between two time series.
}
\details{
The Fortran 90 versions of twdtw typically outperform the C++ version.
Additionally, the '\code{f90goto}' version, which utilizes \code{goto} statements,
tends to be slightly faster than the '\code{f90}' version that only uses
while and for loops.
}
\examples{

n <- 20
t <- seq(0, pi, length.out = n)

x <- data.frame(date = seq(as.Date("2020-01-01"), by = "day", length.out = n),
             value = sin(t)*2 + runif(n))

y <- data.frame(date = seq(as.Date("2020-01-05"), by = "day", length.out = n),
             value = sin(t)*2 + runif(n))

plot(x, type = "l")
lines(y, col = "red")

# Calculate TWDTW distance between x and y
twdtw(x, y, tw = c(-.1, 50),
  tw_r = function(dist,td,tw1,tw2) dist + 1.0 / (1.0 + exp(-0.1 * (td - 50))))

twdtw(x, y, tw = c(-.1, 50), version = 'f90goto')

twdtw(x, y, tw = c(-.1, 50), version = 'cpp')

}
